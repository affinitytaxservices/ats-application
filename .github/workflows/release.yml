name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

env:
  NODE_VERSION: '18.17.0'

jobs:
  # Job 1: Validate release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if it's a prerelease (contains alpha, beta, rc)
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Release version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha"
            exit 1
          fi
          echo "‚úÖ Version format is valid"

  # Job 2: Build release artifacts
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run tests
        run: npm run test:ci
        env:
          CI: true

      - name: Build application
        run: npm run build:prod
        env:
          CI: false
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Create release archive
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          tar -czf "ats-application-$VERSION.tar.gz" -C build .
          zip -r "ats-application-$VERSION.zip" build/

      - name: Generate checksums
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          sha256sum "ats-application-$VERSION.tar.gz" > "ats-application-$VERSION.tar.gz.sha256"
          sha256sum "ats-application-$VERSION.zip" > "ats-application-$VERSION.zip.sha256"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            ats-application-*.tar.gz
            ats-application-*.zip
            ats-application-*.sha256

  # Job 3: Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Get commits since last tag
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the first release of ATS Application." >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## Installation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Download the appropriate archive for your platform:" >> CHANGELOG.md
          echo "- \`ats-application-$VERSION.tar.gz\` - Gzipped tarball" >> CHANGELOG.md
          echo "- \`ats-application-$VERSION.zip\` - ZIP archive" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Verify the integrity using the provided SHA256 checksums." >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body_path: CHANGELOG.md
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          files: |
            ats-application-*.tar.gz
            ats-application-*.zip
            ats-application-*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 4: Deploy release (if production tag)
  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build for production
        run: npm run build:prod
        env:
          CI: false
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Deploy to production
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Install SSH key
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add server to known hosts
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          # Create backup of current deployment
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST \
            "cd $DEPLOY_PATH && tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz * || true"
          
          # Deploy new version
          rsync -avz --delete -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            build/ $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
          
          # Restart application
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST \
            "cd $DEPLOY_PATH && pm2 reload ecosystem.config.js --env production"

      - name: Verify deployment
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          # Wait for application to start
          sleep 30
          
          # Check if application is responding
          if curl -f -s "https://$DEPLOY_HOST/health.html" > /dev/null; then
            echo "‚úÖ Deployment verification successful"
          else
            echo "‚ùå Deployment verification failed"
            exit 1
          fi

      - name: Notify release deployment
        if: success()
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "üöÄ Release $VERSION deployed successfully to production!"
          # Add notification logic here (Slack, email, etc.)