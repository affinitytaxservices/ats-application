name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm run test:ci
    
    - name: Build production version
      run: npm run build:prod
      env:
        REACT_APP_ENV: production
    
    - name: Create build archive
      run: |
        cd build
        tar -czf ../ats-application-${{ github.ref_name }}.tar.gz .
        cd ..
        zip -r ats-application-${{ github.ref_name }}.zip build/
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Generating changelog from $PREVIOUS_TAG to ${{ github.ref_name }}"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ github.ref_name }})
        else
          echo "Generating changelog for initial release"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Release Notes
          ${{ github.event.inputs.release_notes || 'Automated release' }}
          
          ## Installation
          
          Download the build artifacts below and deploy to your web server.
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.previous_tag }}...${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ats-application-${{ github.ref_name }}.tar.gz
        asset_name: ats-application-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload ZIP release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ats-application-${{ github.ref_name }}.zip
        asset_name: ats-application-${{ github.ref_name }}.zip
        asset_content_type: application/zip
    
    - name: Deploy to production
      if: "!contains(github.ref_name, 'beta') && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'rc')"
      run: |
        echo "Deploying release ${{ github.ref_name }} to production..."
        # Add your production deployment commands here
        # This could include:
        # - Uploading to AWS S3
        # - Deploying to your web server
        # - Updating CDN cache
        # - Notifying monitoring services
    
    - name: Notify team
      if: success()
      run: |
        echo "Release ${{ github.ref_name }} has been successfully created and deployed!"
        # Add notification logic here (Slack, email, etc.)

  update-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Update package.json version
      run: |
        VERSION=${{ github.event.inputs.version }}
        VERSION_NUMBER=${VERSION#v}  # Remove 'v' prefix
        npm version $VERSION_NUMBER --no-git-tag-version
    
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ github.event.inputs.version }}"
        git push
    
    - name: Create and push tag
      run: |
        git tag ${{ github.event.inputs.version }}
        git push origin ${{ github.event.inputs.version }}