# Error Handling and Recovery Workflow
# This workflow is triggered when the main CI/CD pipeline fails
# It provides automated error handling, notifications, and recovery options

name: Error Handling & Recovery

on:
  workflow_run:
    workflows: ["ATS CI/CD Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      error_type:
        description: 'Type of error to handle'
        required: true
        default: 'deployment_failure'
        type: choice
        options:
          - deployment_failure
          - build_failure
          - test_failure
          - security_issue
          - rollback_required
      severity:
        description: 'Error severity level'
        required: true
        default: 'high'
        type: choice
        options:
          - critical
          - high
          - medium
          - low
      auto_rollback:
        description: 'Automatically rollback on deployment failure'
        required: false
        default: true
        type: boolean
      notify_team:
        description: 'Send notifications to team'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18.x'
  APP_NAME: 'ats-application'
  DEPLOY_PATH: '/var/www/ats-application'
  SERVER_IP: '195.250.21.159'
  PRODUCTION_DOMAIN: 'www.affinitytaxservices.com'
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
  EMAIL_RECIPIENTS: ${{ secrets.ERROR_EMAIL_RECIPIENTS }}

jobs:
  # Error Detection and Analysis
  error-analysis:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch'
    outputs:
      error_type: ${{ steps.analyze.outputs.error_type }}
      severity: ${{ steps.analyze.outputs.severity }}
      should_rollback: ${{ steps.analyze.outputs.should_rollback }}
      error_summary: ${{ steps.analyze.outputs.error_summary }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔍 Analyze workflow failure
      id: analyze
      run: |
        echo "🔍 Analyzing workflow failure..."
        
        # Determine error type based on workflow run or manual input
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          ERROR_TYPE="${{ github.event.inputs.error_type }}"
          SEVERITY="${{ github.event.inputs.severity }}"
        else
          # Analyze the failed workflow to determine error type
          WORKFLOW_ID="${{ github.event.workflow_run.id }}"
          
          # Default values for automated detection
          ERROR_TYPE="deployment_failure"
          SEVERITY="high"
          
          # Check if it's a build/test failure or deployment failure
          if [[ "${{ github.event.workflow_run.name }}" == *"build"* ]] || [[ "${{ github.event.workflow_run.name }}" == *"test"* ]]; then
            ERROR_TYPE="build_failure"
          fi
        fi
        
        # Determine if rollback is needed
        SHOULD_ROLLBACK="false"
        if [[ "$ERROR_TYPE" == "deployment_failure" ]] && [[ "${{ github.event.inputs.auto_rollback }}" != "false" ]]; then
          SHOULD_ROLLBACK="true"
        fi
        
        # Create error summary
        ERROR_SUMMARY="Workflow failure detected: $ERROR_TYPE (Severity: $SEVERITY)"
        
        echo "error_type=$ERROR_TYPE" >> $GITHUB_OUTPUT
        echo "severity=$SEVERITY" >> $GITHUB_OUTPUT
        echo "should_rollback=$SHOULD_ROLLBACK" >> $GITHUB_OUTPUT
        echo "error_summary=$ERROR_SUMMARY" >> $GITHUB_OUTPUT
        
        echo "📊 Error Analysis Complete:"
        echo "  - Type: $ERROR_TYPE"
        echo "  - Severity: $SEVERITY"
        echo "  - Rollback Required: $SHOULD_ROLLBACK"
    
    - name: 📋 Generate error report
      run: |
        echo "📋 Generating detailed error report..."
        
        cat > error-report.md << EOF
        # Error Report - $(date '+%Y-%m-%d %H:%M:%S UTC')
        
        ## Summary
        - **Error Type**: ${{ steps.analyze.outputs.error_type }}
        - **Severity**: ${{ steps.analyze.outputs.severity }}
        - **Repository**: ${{ github.repository }}
        - **Branch**: ${{ github.ref_name }}
        - **Commit**: ${{ github.sha }}
        - **Actor**: ${{ github.actor }}
        - **Workflow Run**: ${{ github.run_id }}
        
        ## Error Details
        ${{ steps.analyze.outputs.error_summary }}
        
        ## Environment Information
        - **Server IP**: ${{ env.SERVER_IP }}
        - **Domain**: ${{ env.PRODUCTION_DOMAIN }}
        - **Deploy Path**: ${{ env.DEPLOY_PATH }}
        
        ## Recommended Actions
        EOF
        
        # Add specific recommendations based on error type
        case "${{ steps.analyze.outputs.error_type }}" in
          "deployment_failure")
            echo "- Check server connectivity and permissions" >> error-report.md
            echo "- Verify deployment scripts and configuration" >> error-report.md
            echo "- Consider automatic rollback if enabled" >> error-report.md
            ;;
          "build_failure")
            echo "- Review build logs for compilation errors" >> error-report.md
            echo "- Check for missing dependencies or version conflicts" >> error-report.md
            echo "- Verify Node.js version compatibility" >> error-report.md
            ;;
          "test_failure")
            echo "- Review test results and failure details" >> error-report.md
            echo "- Check for breaking changes in recent commits" >> error-report.md
            echo "- Update or fix failing test cases" >> error-report.md
            ;;
          "security_issue")
            echo "- Review security audit results" >> error-report.md
            echo "- Update vulnerable dependencies immediately" >> error-report.md
            echo "- Consider emergency deployment if critical" >> error-report.md
            ;;
        esac
        
        echo "" >> error-report.md
        echo "## Next Steps" >> error-report.md
        echo "1. Review the error details above" >> error-report.md
        echo "2. Apply recommended fixes" >> error-report.md
        echo "3. Re-run the workflow or trigger manual deployment" >> error-report.md
        
        echo "📄 Error report generated successfully"
    
    - name: 📤 Upload error report
      uses: actions/upload-artifact@v3
      with:
        name: error-report-${{ github.run_id }}
        path: error-report.md
        retention-days: 30

  # Automatic Rollback (if deployment failed)
  emergency-rollback:
    runs-on: ubuntu-latest
    needs: error-analysis
    if: needs.error-analysis.outputs.should_rollback == 'true'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔐 Setup SSH for rollback
      run: |
        echo "🔐 Setting up SSH connection..."
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: 🔄 Execute emergency rollback
      run: |
        echo "🚨 Executing emergency rollback..."
        
        cat > emergency_rollback.sh << 'EOF'
        #!/bin/bash
        set -e
        
        DEPLOY_USER="$1"
        SERVER_HOST="$2"
        DEPLOY_PATH="$3"
        APP_NAME="$4"
        
        echo "🔄 Starting emergency rollback for $APP_NAME..."
        
        # Check if backup exists
        BACKUP_EXISTS=$(ssh $DEPLOY_USER@$SERVER_HOST "ls -la $DEPLOY_PATH/backups/ | wc -l" || echo "0")
        
        if [ "$BACKUP_EXISTS" -lt "3" ]; then
          echo "❌ No backup found for rollback!"
          echo "🔍 Available backups:"
          ssh $DEPLOY_USER@$SERVER_HOST "ls -la $DEPLOY_PATH/backups/ || echo 'No backups directory found'"
          exit 1
        fi
        
        # Get the most recent backup
        LATEST_BACKUP=$(ssh $DEPLOY_USER@$SERVER_HOST "ls -t $DEPLOY_PATH/backups/ | head -1")
        echo "📦 Rolling back to: $LATEST_BACKUP"
        
        # Stop current services
        echo "⏹️ Stopping current services..."
        ssh $DEPLOY_USER@$SERVER_HOST "pm2 stop $APP_NAME || true"
        
        # Restore from backup
        echo "📦 Restoring from backup..."
        ssh $DEPLOY_USER@$SERVER_HOST "sudo rm -rf $DEPLOY_PATH/current && sudo cp -r $DEPLOY_PATH/backups/$LATEST_BACKUP $DEPLOY_PATH/current"
        
        # Set proper permissions
        ssh $DEPLOY_USER@$SERVER_HOST "sudo chown -R www-data:www-data $DEPLOY_PATH/current && sudo chmod -R 755 $DEPLOY_PATH/current"
        
        # Restart services
        echo "🔄 Restarting services..."
        ssh $DEPLOY_USER@$SERVER_HOST "sudo systemctl reload nginx"
        ssh $DEPLOY_USER@$SERVER_HOST "pm2 start $DEPLOY_PATH/current/ecosystem.config.js --env production || pm2 restart $APP_NAME"
        
        # Health check
        echo "🏥 Performing health check..."
        sleep 15
        
        HEALTH_CHECK=$(ssh $DEPLOY_USER@$SERVER_HOST "curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/health || curl -s -o /dev/null -w '%{http_code}' http://localhost/ || echo '000'")
        
        if [ "$HEALTH_CHECK" = "200" ] || [ "$HEALTH_CHECK" = "301" ] || [ "$HEALTH_CHECK" = "302" ]; then
          echo "✅ Emergency rollback completed successfully!"
          echo "🌐 Application is responding at: https://${{ env.PRODUCTION_DOMAIN }}"
        else
          echo "⚠️ Rollback completed but health check failed (HTTP: $HEALTH_CHECK)"
          echo "🔍 Manual verification required"
        fi
        EOF
        
        chmod +x emergency_rollback.sh
        ./emergency_rollback.sh "${{ secrets.DEPLOY_USER }}" "${{ secrets.SERVER_HOST }}" "${{ env.DEPLOY_PATH }}" "${{ env.APP_NAME }}"

  # System Health Check
  health-check:
    runs-on: ubuntu-latest
    needs: [error-analysis]
    if: always()
    
    steps:
    - name: 🏥 Comprehensive health check
      run: |
        echo "🏥 Performing comprehensive system health check..."
        
        # Check if SSH connection works
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
        echo "🔗 Testing SSH connectivity..."
        if ssh -o ConnectTimeout=10 ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"; then
          echo "✅ SSH connection: OK"
        else
          echo "❌ SSH connection: FAILED"
        fi
        
        echo "🌐 Testing web server response..."
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 https://${{ env.PRODUCTION_DOMAIN }} || echo "000")
        
        if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "301" ] || [ "$HTTP_STATUS" = "302" ]; then
          echo "✅ Web server: OK (HTTP $HTTP_STATUS)"
        else
          echo "❌ Web server: FAILED (HTTP $HTTP_STATUS)"
        fi
        
        echo "📊 Server resource check..."
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} "
          echo '💾 Disk usage:'
          df -h | grep -E '(Filesystem|/dev/)'
          echo ''
          echo '🧠 Memory usage:'
          free -h
          echo ''
          echo '⚡ CPU load:'
          uptime
          echo ''
          echo '🔄 PM2 processes:'
          pm2 list || echo 'PM2 not running'
          echo ''
          echo '🌐 Nginx status:'
          sudo systemctl status nginx --no-pager -l || echo 'Nginx status check failed'
        " || echo "❌ Server resource check failed"

  # Notification System
  notify-team:
    runs-on: ubuntu-latest
    needs: [error-analysis, emergency-rollback, health-check]
    if: always() && (github.event.inputs.notify_team != 'false')
    
    steps:
    - name: 📧 Send error notifications
      run: |
        echo "📧 Sending error notifications..."
        
        # Prepare notification message
        ROLLBACK_STATUS="Not performed"
        if [ "${{ needs.emergency-rollback.result }}" = "success" ]; then
          ROLLBACK_STATUS="✅ Completed successfully"
        elif [ "${{ needs.emergency-rollback.result }}" = "failure" ]; then
          ROLLBACK_STATUS="❌ Failed"
        fi
        
        HEALTH_STATUS="Unknown"
        if [ "${{ needs.health-check.result }}" = "success" ]; then
          HEALTH_STATUS="✅ System healthy"
        elif [ "${{ needs.health-check.result }}" = "failure" ]; then
          HEALTH_STATUS="❌ System issues detected"
        fi
        
        # Create notification payload
        cat > notification.json << EOF
        {
          "text": "🚨 ATS Application Error Alert",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "🚨 ATS Application Error Alert"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Error Type:*\n${{ needs.error-analysis.outputs.error_type }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Severity:*\n${{ needs.error-analysis.outputs.severity }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Repository:*\n${{ github.repository }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Branch:*\n${{ github.ref_name }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Commit:*\n${{ github.sha }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Actor:*\n${{ github.actor }}"
                }
              ]
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Rollback Status:*\n$ROLLBACK_STATUS"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Health Check:*\n$HEALTH_STATUS"
                }
              ]
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Error Summary:*\n${{ needs.error-analysis.outputs.error_summary }}"
              }
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View Workflow"
                  },
                  "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                },
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "Check Application"
                  },
                  "url": "https://${{ env.PRODUCTION_DOMAIN }}"
                }
              ]
            }
          ]
        }
        EOF
        
        # Send Slack notification (if webhook is configured)
        if [ -n "${{ env.SLACK_WEBHOOK }}" ]; then
          echo "📱 Sending Slack notification..."
          curl -X POST -H 'Content-type: application/json' \
            --data @notification.json \
            "${{ env.SLACK_WEBHOOK }}" || echo "Failed to send Slack notification"
        else
          echo "⚠️ Slack webhook not configured, skipping Slack notification"
        fi
        
        echo "📧 Notification process completed"
    
    - name: 📊 Create issue for critical errors
      if: needs.error-analysis.outputs.severity == 'critical'
      uses: actions/github-script@v6
      with:
        script: |
          const title = `🚨 Critical Error: ${{ needs.error-analysis.outputs.error_type }}`;
          const body = `
          ## Critical Error Report
          
          **Error Type:** ${{ needs.error-analysis.outputs.error_type }}
          **Severity:** ${{ needs.error-analysis.outputs.severity }}
          **Workflow Run:** ${{ github.run_id }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Actor:** ${{ github.actor }}
          
          ### Error Summary
          ${{ needs.error-analysis.outputs.error_summary }}
          
          ### Rollback Status
          ${{ needs.emergency-rollback.result == 'success' && '✅ Emergency rollback completed' || '❌ Rollback failed or not performed' }}
          
          ### Health Check Status
          ${{ needs.health-check.result == 'success' && '✅ System health check passed' || '❌ System health issues detected' }}
          
          ### Action Required
          This is a critical error that requires immediate attention. Please:
          1. Review the workflow logs
          2. Check the application status
          3. Apply necessary fixes
          4. Close this issue once resolved
          
          **Workflow Link:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          **Application URL:** https://${{ env.PRODUCTION_DOMAIN }}
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['critical', 'error', 'deployment']
          });

  # Recovery Recommendations
  recovery-guide:
    runs-on: ubuntu-latest
    needs: [error-analysis, emergency-rollback, health-check]
    if: always()
    
    steps:
    - name: 📋 Generate recovery recommendations
      run: |
        echo "📋 Generating recovery recommendations..."
        
        cat > recovery-guide.md << EOF
        # Recovery Guide - ${{ needs.error-analysis.outputs.error_type }}
        
        Generated: $(date '+%Y-%m-%d %H:%M:%S UTC')
        
        ## Current Status
        - **Error Type**: ${{ needs.error-analysis.outputs.error_type }}
        - **Severity**: ${{ needs.error-analysis.outputs.severity }}
        - **Rollback Status**: ${{ needs.emergency-rollback.result || 'Not performed' }}
        - **Health Check**: ${{ needs.health-check.result || 'Not performed' }}
        
        ## Immediate Actions Required
        EOF
        
        # Add specific recovery steps based on error type
        case "${{ needs.error-analysis.outputs.error_type }}" in
          "deployment_failure")
            cat >> recovery-guide.md << EOF
        
        ### Deployment Failure Recovery
        1. **Check Server Status**
           \`\`\`bash
           ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_HOST }}
           sudo systemctl status nginx
           pm2 status
           \`\`\`
        
        2. **Verify Deployment Path**
           \`\`\`bash
           ls -la ${{ env.DEPLOY_PATH }}/
           ls -la ${{ env.DEPLOY_PATH }}/current/
           \`\`\`
        
        3. **Check Application Logs**
           \`\`\`bash
           pm2 logs ${{ env.APP_NAME }}
           sudo tail -f /var/log/nginx/error.log
           \`\`\`
        
        4. **Manual Rollback** (if automatic rollback failed)
           \`\`\`bash
           cd ${{ env.DEPLOY_PATH }}
           sudo rm -f current
           sudo ln -sf \$(ls -t backups/ | head -1) current
           sudo systemctl reload nginx
           pm2 restart ${{ env.APP_NAME }}
           \`\`\`
        EOF
            ;;
          "build_failure")
            cat >> recovery-guide.md << EOF
        
        ### Build Failure Recovery
        1. **Check Node.js Version**
           \`\`\`bash
           node --version
           npm --version
           \`\`\`
        
        2. **Clear Cache and Reinstall**
           \`\`\`bash
           npm cache clean --force
           rm -rf node_modules package-lock.json
           npm install
           \`\`\`
        
        3. **Run Build Locally**
           \`\`\`bash
           npm run build
           \`\`\`
        
        4. **Check for Breaking Changes**
           - Review recent commits
           - Check dependency updates
           - Verify environment variables
        EOF
            ;;
          "test_failure")
            cat >> recovery-guide.md << EOF
        
        ### Test Failure Recovery
        1. **Run Tests Locally**
           \`\`\`bash
           npm test
           npm test -- --verbose
           \`\`\`
        
        2. **Check Test Environment**
           - Verify test database connection
           - Check environment variables
           - Review test configuration
        
        3. **Update Failing Tests**
           - Fix broken test cases
           - Update snapshots if needed
           - Add missing test data
        EOF
            ;;
        esac
        
        cat >> recovery-guide.md << EOF
        
        ## Prevention Measures
        - Set up monitoring and alerting
        - Implement health checks
        - Regular backup verification
        - Staging environment testing
        - Gradual deployment strategies
        
        ## Emergency Contacts
        - DevOps Team: [Add contact information]
        - System Administrator: [Add contact information]
        - On-call Engineer: [Add contact information]
        
        ## Useful Commands
        \`\`\`bash
        # Check application status
        curl -I https://${{ env.PRODUCTION_DOMAIN }}
        
        # SSH to server
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_HOST }}
        
        # Check system resources
        df -h && free -h && uptime
        
        # Restart services
        sudo systemctl restart nginx
        pm2 restart all
        \`\`\`
        EOF
        
        echo "📄 Recovery guide generated successfully"
    
    - name: 📤 Upload recovery guide
      uses: actions/upload-artifact@v3
      with:
        name: recovery-guide-${{ github.run_id }}
        path: recovery-guide.md
        retention-days: 30
    
    - name: 📊 Workflow summary
      run: |
        echo "## 📊 Error Handling Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Error Type:** ${{ needs.error-analysis.outputs.error_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Severity:** ${{ needs.error-analysis.outputs.severity }}" >> $GITHUB_STEP_SUMMARY
        echo "**Rollback Status:** ${{ needs.emergency-rollback.result || 'Not performed' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Health Check:** ${{ needs.health-check.result || 'Not performed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Error Report: \`error-report-${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Recovery Guide: \`recovery-guide-${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Application URL](https://${{ env.PRODUCTION_DOMAIN }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY