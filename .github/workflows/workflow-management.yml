name: Workflow Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Management action to perform'
        required: true
        type: choice
        options:
          - 'validate-all-workflows'
          - 'cleanup-old-runs'
          - 'generate-report'
          - 'test-notifications'
        default: 'validate-all-workflows'
      days_to_keep:
        description: 'Days to keep workflow runs (for cleanup)'
        required: false
        type: number
        default: 30

jobs:
  validate-workflows:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'validate-all-workflows'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate workflow syntax
      run: |
        echo "Validating all workflow files..."
        
        # Check if all workflow files are valid YAML
        for workflow in .github/workflows/*.yml; do
          if [ -f "$workflow" ]; then
            echo "Validating $workflow"
            # Use Python to validate YAML syntax
            python3 -c "
        import yaml
        import sys
        try:
            with open('$workflow', 'r') as f:
                yaml.safe_load(f)
            print('‚úÖ $workflow is valid')
        except yaml.YAMLError as e:
            print('‚ùå $workflow has syntax errors:')
            print(e)
            sys.exit(1)
        except Exception as e:
            print('‚ùå Error reading $workflow:')
            print(e)
            sys.exit(1)
            "
          fi
        done
        
        echo "All workflow files validated successfully!"
    
    - name: Check workflow dependencies
      run: |
        echo "Checking workflow dependencies and references..."
        
        # Check for required secrets
        REQUIRED_SECRETS=("GITHUB_TOKEN")
        OPTIONAL_SECRETS=("SNYK_TOKEN" "SLACK_WEBHOOK_URL")
        
        echo "Required secrets that should be configured:"
        for secret in "${REQUIRED_SECRETS[@]}"; do
          echo "  - $secret"
        done
        
        echo "Optional secrets for enhanced functionality:"
        for secret in "${OPTIONAL_SECRETS[@]}"; do
          echo "  - $secret"
        done
        
        # Check for action version consistency
        echo "Checking action versions..."
        grep -r "uses:" .github/workflows/ | grep -E "@v[0-9]+" | sort | uniq
    
    - name: Generate workflow summary
      run: |
        echo "## Workflow Summary" > workflow-summary.md
        echo "" >> workflow-summary.md
        
        for workflow in .github/workflows/*.yml; do
          if [ -f "$workflow" ] && [ "$(basename "$workflow")" != "workflow-management.yml" ]; then
            WORKFLOW_NAME=$(basename "$workflow" .yml)
            echo "### $WORKFLOW_NAME" >> workflow-summary.md
            
            # Extract workflow name and triggers
            DISPLAY_NAME=$(grep "^name:" "$workflow" | head -1 | sed 's/name: *//' | tr -d '"')
            echo "**Display Name:** $DISPLAY_NAME" >> workflow-summary.md
            
            echo "**Triggers:**" >> workflow-summary.md
            grep -A 10 "^on:" "$workflow" | grep -E "^  [a-z_]+:" | sed 's/^  /- /' | sed 's/:$//' >> workflow-summary.md
            echo "" >> workflow-summary.md
          fi
        done
        
        cat workflow-summary.md
    
    - name: Upload workflow summary
      uses: actions/upload-artifact@v4
      with:
        name: workflow-summary
        path: workflow-summary.md
        retention-days: 30

  cleanup-old-runs:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'cleanup-old-runs'
    
    steps:
    - name: Cleanup old workflow runs
      uses: actions/github-script@v7
      with:
        script: |
          const daysToKeep = parseInt('${{ github.event.inputs.days_to_keep }}') || 30;
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
          
          console.log(`Cleaning up workflow runs older than ${daysToKeep} days (before ${cutoffDate.toISOString()})`);
          
          const workflows = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          let deletedCount = 0;
          
          for (const run of workflows.data.workflow_runs) {
            const runDate = new Date(run.created_at);
            
            if (runDate < cutoffDate && run.status === 'completed') {
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
                console.log(`Deleted workflow run: ${run.name} (${run.id}) from ${run.created_at}`);
                deletedCount++;
              } catch (error) {
                console.log(`Failed to delete run ${run.id}: ${error.message}`);
              }
            }
          }
          
          console.log(`Cleanup completed. Deleted ${deletedCount} workflow runs.`);

  generate-report:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'generate-report'
    
    steps:
    - name: Generate workflow analytics report
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Get workflow runs for the last 30 days
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          
          const workflows = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            created: `>=${thirtyDaysAgo.toISOString().split('T')[0]}`,
            per_page: 100
          });
          
          const stats = {
            total_runs: workflows.data.total_count,
            successful_runs: 0,
            failed_runs: 0,
            cancelled_runs: 0,
            workflows: {}
          };
          
          workflows.data.workflow_runs.forEach(run => {
            // Count by status
            if (run.conclusion === 'success') stats.successful_runs++;
            else if (run.conclusion === 'failure') stats.failed_runs++;
            else if (run.conclusion === 'cancelled') stats.cancelled_runs++;
            
            // Count by workflow
            if (!stats.workflows[run.name]) {
              stats.workflows[run.name] = { total: 0, success: 0, failure: 0 };
            }
            stats.workflows[run.name].total++;
            if (run.conclusion === 'success') stats.workflows[run.name].success++;
            if (run.conclusion === 'failure') stats.workflows[run.name].failure++;
          });
          
          // Generate report
          const report = `# Workflow Analytics Report
          
          **Report Period:** Last 30 days
          **Generated:** ${new Date().toISOString()}
          
          ## Summary
          - **Total Runs:** ${stats.total_runs}
          - **Successful:** ${stats.successful_runs} (${((stats.successful_runs/stats.total_runs)*100).toFixed(1)}%)
          - **Failed:** ${stats.failed_runs} (${((stats.failed_runs/stats.total_runs)*100).toFixed(1)}%)
          - **Cancelled:** ${stats.cancelled_runs} (${((stats.cancelled_runs/stats.total_runs)*100).toFixed(1)}%)
          
          ## Workflow Breakdown
          ${Object.entries(stats.workflows).map(([name, data]) => 
            `### ${name}
            - Total: ${data.total}
            - Success Rate: ${((data.success/data.total)*100).toFixed(1)}%
            - Failures: ${data.failure}`
          ).join('\n\n')}
          `;
          
          fs.writeFileSync('workflow-report.md', report);
          console.log('Report generated successfully!');
          console.log(report);
    
    - name: Upload analytics report
      uses: actions/upload-artifact@v4
      with:
        name: workflow-analytics-report
        path: workflow-report.md
        retention-days: 90

  test-notifications:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'test-notifications'
    
    steps:
    - name: Test notification systems
      run: |
        echo "Testing notification systems..."
        
        # Test Slack notification (if configured)
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          echo "Testing Slack notification..."
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "üß™ Test notification from ATS Application GitHub Actions",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Repository", "value": "${{ github.repository }}", "short": true},
                  {"title": "Triggered by", "value": "${{ github.actor }}", "short": true},
                  {"title": "Timestamp", "value": "$(date -u)", "short": false}
                ]
              }]
            }' \
            "${{ secrets.SLACK_WEBHOOK_URL }}" && echo "‚úÖ Slack notification sent successfully" || echo "‚ùå Slack notification failed"
        else
          echo "‚ö†Ô∏è SLACK_WEBHOOK_URL not configured"
        fi
        
        # Test email notification (if configured)
        echo "üìß Email notifications would be sent here (configure as needed)"
        
        # Test GitHub issue creation (example)
        echo "üìù GitHub issue notifications are available via GitHub API"
        
        echo "Notification test completed!"

  workflow-health-check:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Workflow health summary
      run: |
        echo "## Workflow Management Health Check"
        echo "**Timestamp:** $(date -u)"
        echo "**Triggered by:** ${{ github.actor }}"
        echo "**Action:** ${{ github.event.inputs.action }}"
        echo "**Repository:** ${{ github.repository }}"
        echo "**Workflow Status:** Completed"
        
        # Check if all required workflows exist
        REQUIRED_WORKFLOWS=(
          "ci.yml"
          "dependency-update.yml"
          "code-quality.yml"
          "release.yml"
          "database.yml"
          "monitoring.yml"
        )
        
        echo "\n## Workflow File Status"
        for workflow in "${REQUIRED_WORKFLOWS[@]}"; do
          if [ -f ".github/workflows/$workflow" ]; then
            echo "‚úÖ $workflow - Present"
          else
            echo "‚ùå $workflow - Missing"
          fi
        done
        
        echo "\n## Next Steps"
        echo "1. Review workflow configurations"
        echo "2. Configure required secrets"
        echo "3. Test workflows with sample commits"
        echo "4. Monitor workflow execution"