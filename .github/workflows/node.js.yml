# Affinity Tax Services - CI/CD Pipeline
# Automated build, test, and deployment workflow

name: ATS CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - rollback
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'
  APP_NAME: 'ats-application'
  DEPLOY_PATH: '/var/www/ats-application'
  SERVER_IP: '195.250.21.159'
  PRODUCTION_DOMAIN: 'www.affinitytaxservices.com'

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true' && github.event.inputs.action != 'rollback'
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout repository code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        echo "Installing dependencies..."
        npm ci --prefer-offline --no-audit
    
    - name: 🔍 Run security audit
      run: |
        echo "Running security audit..."
        npm audit --audit-level high || true
    
    - name: 🧪 Run tests with coverage
      run: |
        echo "Running test suite..."
        npm test -- --coverage --watchAll=false --passWithNoTests
      env:
        CI: true
    
    - name: 🏗️ Build application
      run: |
        echo "Building application..."
        NODE_OPTIONS="--max-old-space-size=4096" npm run build --if-present
      env:
        CI: false
        GENERATE_SOURCEMAP: false
    
    - name: 📊 Upload coverage reports
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: false
    
    - name: 📦 Archive build artifacts
      if: matrix.node-version == '18.x'
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          build/
          package.json
          package-lock.json
        retention-days: 7

  # Deployment Job
  deploy:
    runs-on: ubuntu-latest
    needs: ${{ (github.event.inputs.skip_tests == 'true' || github.event.inputs.action == 'rollback') && '[]' || '[build-and-test]' }}
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    
    environment:
      name: production
      url: https://www.affinitytaxservices.com
    
    steps:
    - name: 📥 Checkout repository code
      uses: actions/checkout@v4
    
    - name: 📦 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: .
    
    - name: 🔧 Setup Node.js for deployment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 🔐 Setup SSH key
      run: |
        echo "Setting up SSH key..."
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: 🚀 Deploy to production server
      run: |
        echo "Starting deployment to production server..."
        
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Deployment configuration
        DEPLOY_USER="$1"
        SERVER_HOST="$2"
        DEPLOY_PATH="$3"
        APP_NAME="$4"
        
        echo "🚀 Deploying $APP_NAME to $SERVER_HOST..."
        
        # Create backup of current deployment
        ssh $DEPLOY_USER@$SERVER_HOST "sudo mkdir -p $DEPLOY_PATH/backups && sudo cp -r $DEPLOY_PATH/current $DEPLOY_PATH/backups/backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || true"
        
        # Create new release directory
        RELEASE_DIR="$DEPLOY_PATH/releases/$(date +%Y%m%d-%H%M%S)"
        ssh $DEPLOY_USER@$SERVER_HOST "sudo mkdir -p $RELEASE_DIR"
        
        # Upload application files
        echo "📦 Uploading application files..."
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.env*' \
          --exclude='*.log' \
          ./ $DEPLOY_USER@$SERVER_HOST:$RELEASE_DIR/
        
        # Install production dependencies
        echo "📦 Installing production dependencies..."
        ssh $DEPLOY_USER@$SERVER_HOST "cd $RELEASE_DIR && npm ci --only=production --prefer-offline"
        
        # Copy environment configuration
        echo "⚙️ Setting up environment configuration..."
        ssh $DEPLOY_USER@$SERVER_HOST "sudo cp $DEPLOY_PATH/shared/.env $RELEASE_DIR/.env 2>/dev/null || echo 'No .env file found in shared directory'"
        
        # Update symlink to new release
        echo "🔗 Updating application symlink..."
        ssh $DEPLOY_USER@$SERVER_HOST "sudo rm -f $DEPLOY_PATH/current && sudo ln -sf $RELEASE_DIR $DEPLOY_PATH/current"
        
        # Set proper permissions
        ssh $DEPLOY_USER@$SERVER_HOST "sudo chown -R www-data:www-data $DEPLOY_PATH/current && sudo chmod -R 755 $DEPLOY_PATH/current"
        
        echo "✅ Deployment completed successfully!"
        EOF
        
        chmod +x deploy.sh
        ./deploy.sh "${{ secrets.DEPLOY_USER }}" "${{ secrets.SERVER_HOST }}" "${{ env.DEPLOY_PATH }}" "${{ env.APP_NAME }}"
      env:
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
    
    - name: 🔄 Restart services
      run: |
        echo "Restarting application services..."
        
        # Create service restart script
        cat > restart_services.sh << 'EOF'
        #!/bin/bash
        set -e
        
        DEPLOY_USER="$1"
        SERVER_HOST="$2"
        APP_NAME="$3"
        
        echo "🔄 Restarting services for $APP_NAME..."
        
        # Restart Nginx
        echo "Restarting Nginx..."
        ssh $DEPLOY_USER@$SERVER_HOST "sudo systemctl reload nginx || sudo systemctl restart nginx"
        
        # Restart PM2 processes (if using PM2)
        echo "Restarting PM2 processes..."
        ssh $DEPLOY_USER@$SERVER_HOST "pm2 restart $APP_NAME || pm2 start ecosystem.config.js --env production" || echo "PM2 not configured"
        
        # Restart application service (if using systemd)
        echo "Restarting application service..."
        ssh $DEPLOY_USER@$SERVER_HOST "sudo systemctl restart $APP_NAME || echo 'Systemd service not configured'"
        
        # Health check
        echo "Performing health check..."
        sleep 10
        ssh $DEPLOY_USER@$SERVER_HOST "curl -f http://localhost:3000/health || curl -f http://localhost/ || echo 'Health check failed - manual verification required'"
        
        echo "✅ Services restarted successfully!"
        EOF
        
        chmod +x restart_services.sh
        ./restart_services.sh "${{ secrets.DEPLOY_USER }}" "${{ secrets.SERVER_HOST }}" "${{ env.APP_NAME }}"
    
    - name: 🧹 Cleanup old releases
      run: |
        echo "Cleaning up old releases..."
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} "sudo find ${{ env.DEPLOY_PATH }}/releases -maxdepth 1 -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true"
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} "sudo find ${{ env.DEPLOY_PATH }}/backups -maxdepth 1 -type d -mtime +30 -exec rm -rf {} + 2>/dev/null || true"
    
    - name: 📢 Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
          echo "🌐 Application URL: https://www.affinitytaxservices.com"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"
        else
          echo "❌ Deployment failed!"
          echo "🔍 Check the logs above for error details"
          echo "📊 Failed commit: ${{ github.sha }}"
        fi

  # Rollback Job (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    
    steps:
    - name: 🔄 Rollback to previous release
      run: |
        echo "Rolling back to previous release..."
        
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
        # Rollback script
        cat > rollback.sh << 'EOF'
        #!/bin/bash
        set -e
        
        DEPLOY_USER="$1"
        SERVER_HOST="$2"
        DEPLOY_PATH="$3"
        
        echo "🔄 Rolling back deployment..."
        
        # Find previous release
        PREVIOUS_RELEASE=$(ssh $DEPLOY_USER@$SERVER_HOST "ls -t $DEPLOY_PATH/releases | head -2 | tail -1")
        
        if [ -z "$PREVIOUS_RELEASE" ]; then
          echo "❌ No previous release found for rollback"
          exit 1
        fi
        
        echo "Rolling back to: $PREVIOUS_RELEASE"
        
        # Update symlink to previous release
        ssh $DEPLOY_USER@$SERVER_HOST "sudo rm -f $DEPLOY_PATH/current && sudo ln -sf $DEPLOY_PATH/releases/$PREVIOUS_RELEASE $DEPLOY_PATH/current"
        
        # Restart services
        ssh $DEPLOY_USER@$SERVER_HOST "sudo systemctl reload nginx && pm2 restart all"
        
        echo "✅ Rollback completed successfully!"
        EOF
        
        chmod +x rollback.sh
        ./rollback.sh "${{ secrets.DEPLOY_USER }}" "${{ secrets.SERVER_HOST }}" "${{ env.DEPLOY_PATH }}"
