name: ATS Application CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.17.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: Run ESLint
        run: |
          npx eslint src/ --ext .js,.jsx --format json --output-file eslint-report.json || true
          npx eslint src/ --ext .js,.jsx
          
      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: eslint-report.json

  # Job 2: Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        node-version: ['18.17.0', '18.x', '20.x']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: Run tests with coverage
        run: |
          npm run test:ci
        env:
          CI: true
          GENERATE_SOURCEMAP: false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18.17.0'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Build application
        run: |
          npm run build:prod
        env:
          CI: false
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '18.17.0'
        with:
          name: build-files
          path: build/
          retention-days: 7

  # Job 3: Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: npm-audit.json

  # Job 4: Build Performance Check
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build and analyze bundle size
        run: |
          npm run build:prod
          npx bundlesize
        env:
          CI: false
          GENERATE_SOURCEMAP: false

      - name: Check build size
        run: |
          BUILD_SIZE=$(du -sh build | cut -f1)
          echo "Build size: $BUILD_SIZE"
          echo "BUILD_SIZE=$BUILD_SIZE" >> $GITHUB_ENV

  # Job 5: Deploy to Staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, performance-check]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, scp, or API calls to your staging server

  # Job 6: Deploy to Production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, performance-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build for production
        run: npm run build:prod
        env:
          CI: false
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Deploy to production server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Install SSH key
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add server to known hosts
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          # Deploy using rsync
          rsync -avz --delete -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            build/ $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
          
          # Restart PM2 application
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST \
            "cd $DEPLOY_PATH && pm2 reload ecosystem.config.js --env production"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          # Add notification logic here (Slack, email, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          # Add failure notification logic here

  # Job 7: Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.includes('temp-') || artifact.expired) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }