# Maintenance and Backup Workflow
# Handles regular maintenance tasks, cleanup, and backups

name: Maintenance & Backup

on:
  schedule:
    # Run maintenance every Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      maintenance_type:
        description: 'Type of maintenance to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - cleanup
          - backup
          - health_check
      force_cleanup:
        description: 'Force cleanup of old artifacts'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'
  RETENTION_DAYS: 90

jobs:
  health-check:
    runs-on: ubuntu-latest
    name: System Health Check
    if: github.event.inputs.maintenance_type == 'health_check' || github.event.inputs.maintenance_type == 'full' || github.event_name == 'schedule'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 🏥 Repository health check
      run: |
        echo "Repository Health Check Report" > health-report.txt
        echo "==============================" >> health-report.txt
        echo "Date: $(date)" >> health-report.txt
        echo "" >> health-report.txt
        
        # Check repository size
        repo_size=$(du -sh . | cut -f1)
        echo "📁 Repository Size: $repo_size" >> health-report.txt
        
        # Check for large files
        echo "" >> health-report.txt
        echo "🔍 Large Files (>10MB):" >> health-report.txt
        find . -type f -size +10M -not -path './.git/*' -not -path './node_modules/*' | head -10 >> health-report.txt || echo "  None found" >> health-report.txt
        
        # Check node_modules size if exists
        if [ -d "node_modules" ]; then
          node_modules_size=$(du -sh node_modules | cut -f1)
          echo "" >> health-report.txt
          echo "📦 node_modules Size: $node_modules_size" >> health-report.txt
        fi
        
        # Check package.json for outdated info
        echo "" >> health-report.txt
        echo "📋 Package Information:" >> health-report.txt
        if [ -f "package.json" ]; then
          name=$(node -e "console.log(require('./package.json').name || 'N/A')")
          version=$(node -e "console.log(require('./package.json').version || 'N/A')")
          echo "  - Name: $name" >> health-report.txt
          echo "  - Version: $version" >> health-report.txt
          
          # Count dependencies
          deps=$(node -e "console.log(Object.keys(require('./package.json').dependencies || {}).length)")
          dev_deps=$(node -e "console.log(Object.keys(require('./package.json').devDependencies || {}).length)")
          echo "  - Dependencies: $deps" >> health-report.txt
          echo "  - Dev Dependencies: $dev_deps" >> health-report.txt
        fi
        
        cat health-report.txt
    
    - name: 🔍 Check for common issues
      run: |
        echo "" >> health-report.txt
        echo "⚠️ Potential Issues:" >> health-report.txt
        
        # Check for .env files in repo
        if find . -name ".env*" -not -path './.git/*' | grep -q .; then
          echo "  - ⚠️ Environment files found in repository" >> health-report.txt
        fi
        
        # Check for large package-lock.json
        if [ -f "package-lock.json" ]; then
          lock_size=$(stat -f%z "package-lock.json" 2>/dev/null || stat -c%s "package-lock.json")
          if [ "$lock_size" -gt 1048576 ]; then  # 1MB
            echo "  - ⚠️ package-lock.json is unusually large ($(($lock_size / 1024))KB)" >> health-report.txt
          fi
        fi
        
        # Check for TODO/FIXME comments
        todo_count=$(grep -r "TODO\|FIXME" src/ --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" | wc -l || echo 0)
        if [ "$todo_count" -gt 0 ]; then
          echo "  - 📝 Found $todo_count TODO/FIXME comments in source code" >> health-report.txt
        fi
        
        echo "" >> health-report.txt
        echo "✅ Health check completed" >> health-report.txt
        
        cat health-report.txt
    
    - name: 📤 Upload health report
      uses: actions/upload-artifact@v3
      with:
        name: health-report
        path: health-report.txt
        retention-days: 30

  cleanup-artifacts:
    runs-on: ubuntu-latest
    name: Cleanup Old Artifacts
    if: github.event.inputs.maintenance_type == 'cleanup' || github.event.inputs.maintenance_type == 'full' || github.event_name == 'schedule'
    
    steps:
    - name: 🧹 Clean up old workflow runs
      uses: actions/github-script@v6
      with:
        script: |
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - ${{ env.RETENTION_DAYS }});
          
          console.log(`Cleaning up workflow runs older than ${cutoffDate.toISOString()}`);
          
          try {
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            for (const workflow of workflows.workflows) {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                status: 'completed',
                per_page: 100
              });
              
              const oldRuns = runs.workflow_runs.filter(run => 
                new Date(run.created_at) < cutoffDate
              );
              
              console.log(`Found ${oldRuns.length} old runs for workflow: ${workflow.name}`);
              
              for (const run of oldRuns.slice(0, 10)) { // Limit to 10 per workflow to avoid rate limits
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id,
                  });
                  console.log(`Deleted run ${run.id} from ${run.created_at}`);
                } catch (error) {
                  console.log(`Failed to delete run ${run.id}: ${error.message}`);
                }
              }
            }
          } catch (error) {
            console.log(`Cleanup failed: ${error.message}`);
          }

  backup-config:
    runs-on: ubuntu-latest
    name: Backup Configuration
    if: github.event.inputs.maintenance_type == 'backup' || github.event.inputs.maintenance_type == 'full' || github.event_name == 'schedule'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Create configuration backup
      run: |
        echo "Creating configuration backup..."
        
        # Create backup directory
        mkdir -p backup/config
        
        # Backup important configuration files
        cp package.json backup/config/ 2>/dev/null || echo "package.json not found"
        cp package-lock.json backup/config/ 2>/dev/null || echo "package-lock.json not found"
        cp .gitignore backup/config/ 2>/dev/null || echo ".gitignore not found"
        cp .nvmrc backup/config/ 2>/dev/null || echo ".nvmrc not found"
        cp README.md backup/config/ 2>/dev/null || echo "README.md not found"
        
        # Backup GitHub workflows
        if [ -d ".github" ]; then
          cp -r .github backup/config/
        fi
        
        # Create backup manifest
        echo "Configuration Backup Manifest" > backup/backup-manifest.txt
        echo "============================" >> backup/backup-manifest.txt
        echo "Created: $(date)" >> backup/backup-manifest.txt
        echo "Repository: ${{ github.repository }}" >> backup/backup-manifest.txt
        echo "Commit: ${{ github.sha }}" >> backup/backup-manifest.txt
        echo "" >> backup/backup-manifest.txt
        echo "Files backed up:" >> backup/backup-manifest.txt
        find backup/config -type f | sed 's|backup/config/||' | sort >> backup/backup-manifest.txt
        
        # Create archive
        tar -czf config-backup-$(date +%Y%m%d).tar.gz backup/
        
        echo "Backup created successfully"
        ls -la config-backup-*.tar.gz
    
    - name: 📤 Upload backup
      uses: actions/upload-artifact@v3
      with:
        name: config-backup-${{ github.run_number }}
        path: config-backup-*.tar.gz
        retention-days: 365  # Keep backups for 1 year

  maintenance-summary:
    runs-on: ubuntu-latest
    name: Maintenance Summary
    needs: [health-check, cleanup-artifacts, backup-config]
    if: always()
    
    steps:
    - name: 📊 Generate maintenance summary
      run: |
        echo "Maintenance Summary Report" > maintenance-summary.txt
        echo "=========================" >> maintenance-summary.txt
        echo "Date: $(date)" >> maintenance-summary.txt
        echo "Workflow Run: ${{ github.run_number }}" >> maintenance-summary.txt
        echo "" >> maintenance-summary.txt
        
        echo "🔧 Maintenance Tasks Completed:" >> maintenance-summary.txt
        echo "  - ✅ Health Check: ${{ needs.health-check.result }}" >> maintenance-summary.txt
        echo "  - ✅ Artifact Cleanup: ${{ needs.cleanup-artifacts.result }}" >> maintenance-summary.txt
        echo "  - ✅ Configuration Backup: ${{ needs.backup-config.result }}" >> maintenance-summary.txt
        echo "" >> maintenance-summary.txt
        
        echo "📈 Next Scheduled Maintenance: $(date -d '+7 days')" >> maintenance-summary.txt
        echo "" >> maintenance-summary.txt
        echo "For detailed reports, check the individual job artifacts." >> maintenance-summary.txt
        
        cat maintenance-summary.txt
    
    - name: 📤 Upload summary
      uses: actions/upload-artifact@v3
      with:
        name: maintenance-summary
        path: maintenance-summary.txt
        retention-days: 90
    
    - name: 📧 Create maintenance issue
      if: github.event_name == 'schedule' && (needs.health-check.result == 'failure' || needs.cleanup-artifacts.result == 'failure' || needs.backup-config.result == 'failure')
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          const issueTitle = `🔧 Maintenance Alert - ${new Date().toISOString().split('T')[0]}`;
          const issueBody = `# Maintenance Alert\n\n` +
            `One or more maintenance tasks failed during the scheduled run.\n\n` +
            `**Task Results:**\n` +
            `- Health Check: ${{ needs.health-check.result }}\n` +
            `- Artifact Cleanup: ${{ needs.cleanup-artifacts.result }}\n` +
            `- Configuration Backup: ${{ needs.backup-config.result }}\n\n` +
            `**Action Required:**\n` +
            `Please review the workflow logs and address any issues.\n\n` +
            `**Workflow Run:** [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n` +
            `This issue was automatically created by the Maintenance workflow.`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['maintenance', 'alert', 'automated']
          });